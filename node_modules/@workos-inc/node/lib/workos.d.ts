import { AxiosResponse } from 'axios';
import { AuditTrail } from './audit-trail/audit-trail';
import { GetOptions, PostOptions, PutOptions, WorkOSOptions } from './common/interfaces';
import { DirectorySync } from './directory-sync/directory-sync';
import { Events } from './events/events';
import { Organizations } from './organizations/organizations';
import { OrganizationDomains } from './organization-domains/organization-domains';
import { Passwordless } from './passwordless/passwordless';
import { Portal } from './portal/portal';
import { SSO } from './sso/sso';
import { Webhooks } from './webhooks/webhooks';
import { Mfa } from './mfa/mfa';
import { AuditLogs } from './audit-logs/audit-logs';
import { Users } from './users/users';
export declare class WorkOS {
    readonly key?: string | undefined;
    readonly options: WorkOSOptions;
    readonly baseURL: string;
    private readonly client;
    readonly auditLogs: AuditLogs;
    readonly auditTrail: AuditTrail;
    readonly directorySync: DirectorySync;
    readonly organizations: Organizations;
    readonly organizationDomains: OrganizationDomains;
    readonly passwordless: Passwordless;
    readonly portal: Portal;
    readonly sso: SSO;
    readonly webhooks: Webhooks;
    readonly mfa: Mfa;
    readonly events: Events;
    readonly users: Users;
    constructor(key?: string | undefined, options?: WorkOSOptions);
    get version(): string;
    post<T = any, D = any, P = any>(path: string, entity: P, options?: PostOptions): Promise<AxiosResponse<T, D>>;
    get<T = any, D = any>(path: string, options?: GetOptions): Promise<AxiosResponse<T, D>>;
    put<T = any, D = any>(path: string, entity: any, options?: PutOptions): Promise<AxiosResponse<T, D>>;
    delete<T = any, D = any>(path: string, query?: any): Promise<AxiosResponse<T, D>>;
    emitWarning(warning: string): void;
    private handleAxiosError;
}
