"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeEvent = void 0;
const serializers_1 = require("../../directory-sync/serializers");
const serializers_2 = require("../../sso/serializers");
const deserializeEvent = (event) => {
    const eventBase = {
        id: event.id,
        createdAt: event.created_at,
    };
    switch (event.event) {
        case 'connection.activated':
        case 'connection.deactivated':
        case 'connection.deleted':
            return Object.assign(Object.assign({}, eventBase), { event: event.event, data: (0, serializers_2.deserializeConnection)(event.data) });
        case 'dsync.activated':
        case 'dsync.deactivated':
            return Object.assign(Object.assign({}, eventBase), { event: event.event, data: (0, serializers_1.deserializeEventDirectory)(event.data) });
        case 'dsync.deleted':
            return Object.assign(Object.assign({}, eventBase), { event: event.event, data: (0, serializers_1.deserializeDeletedEventDirectory)(event.data) });
        case 'dsync.group.created':
        case 'dsync.group.deleted':
            return Object.assign(Object.assign({}, eventBase), { event: event.event, data: (0, serializers_1.deserializeDirectoryGroup)(event.data) });
        case 'dsync.group.updated':
            return Object.assign(Object.assign({}, eventBase), { event: event.event, data: (0, serializers_1.deserializeUpdatedEventDirectoryGroup)(event.data) });
        case 'dsync.group.user_added':
        case 'dsync.group.user_removed':
            return Object.assign(Object.assign({}, eventBase), { event: event.event, data: {
                    directoryId: event.data.directory_id,
                    user: (0, serializers_1.deserializeDirectoryUser)(event.data.user),
                    group: (0, serializers_1.deserializeDirectoryGroup)(event.data.group),
                } });
        case 'dsync.user.created':
        case 'dsync.user.deleted':
            return Object.assign(Object.assign({}, eventBase), { event: event.event, data: (0, serializers_1.deserializeDirectoryUser)(event.data) });
        case 'dsync.user.updated':
            return Object.assign(Object.assign({}, eventBase), { event: event.event, data: (0, serializers_1.deserializeUpdatedEventDirectoryUser)(event.data) });
    }
};
exports.deserializeEvent = deserializeEvent;
