"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const axios_mock_adapter_1 = __importDefault(require("axios-mock-adapter"));
const workos_1 = require("../workos");
const interfaces_1 = require("../sso/interfaces");
const mock = new axios_mock_adapter_1.default(axios_1.default);
describe('Event', () => {
    afterEach(() => mock.resetHistory());
    const workos = new workos_1.WorkOS('sk_test_Sz3IQjepeSWaI4cMS4ms4sMuU');
    const event = {
        id: 'event_01234ABCD',
        createdAt: '2020-05-06 04:21:48.649164',
        event: 'connection.activated',
        data: {
            object: 'connection',
            id: 'conn_01234ABCD',
            organizationId: 'org_1234',
            name: 'Connection',
            type: interfaces_1.ConnectionType.OktaSAML,
            connectionType: interfaces_1.ConnectionType.OktaSAML,
            state: 'active',
            domains: [],
            createdAt: '2020-05-06 04:21:48.649164',
            updatedAt: '2020-05-06 04:21:48.649164',
        },
    };
    const eventResponse = {
        id: 'event_01234ABCD',
        created_at: '2020-05-06 04:21:48.649164',
        event: 'connection.activated',
        data: {
            object: 'connection',
            id: 'conn_01234ABCD',
            organization_id: 'org_1234',
            name: 'Connection',
            connection_type: interfaces_1.ConnectionType.OktaSAML,
            state: 'active',
            domains: [],
            created_at: '2020-05-06 04:21:48.649164',
            updated_at: '2020-05-06 04:21:48.649164',
        },
    };
    describe('listEvents', () => {
        const eventsListResponse = {
            object: 'list',
            data: [eventResponse],
            list_metadata: {},
        };
        it(`requests Events`, () => __awaiter(void 0, void 0, void 0, function* () {
            mock.onGet('/events', {}).replyOnce(200, eventsListResponse);
            const subject = yield workos.events.listEvents({});
            expect(subject).toEqual({
                object: 'list',
                data: [event],
                listMetadata: {},
            });
        }));
        it(`requests Events with a valid event name`, () => __awaiter(void 0, void 0, void 0, function* () {
            mock.onGet('/events').replyOnce(200, eventsListResponse);
            const list = yield workos.events.listEvents({
                events: ['connection.activated'],
            });
            expect(list).toEqual({
                object: 'list',
                data: [event],
                listMetadata: {},
            });
        }));
    });
});
