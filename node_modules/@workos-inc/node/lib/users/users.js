"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Users = void 0;
const pagination_1 = require("../common/utils/pagination");
const serializers_1 = require("./serializers");
const fetch_and_deserialize_1 = require("../common/utils/fetch-and-deserialize");
const serializers_2 = require("../mfa/serializers");
class Users {
    constructor(workos) {
        this.workos = workos;
    }
    getUser(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.get(`/users/${userId}`);
            return (0, serializers_1.deserializeUser)(data);
        });
    }
    listUsers(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new pagination_1.AutoPaginatable(yield (0, fetch_and_deserialize_1.fetchAndDeserialize)(this.workos, '/users', serializers_1.deserializeUser, options), (params) => (0, fetch_and_deserialize_1.fetchAndDeserialize)(this.workos, '/users', serializers_1.deserializeUser, params), options);
        });
    }
    createUser(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/users', (0, serializers_1.serializeCreateUserOptions)(payload));
            return (0, serializers_1.deserializeUser)(data);
        });
    }
    authenticateWithMagicAuth(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/users/authenticate', (0, serializers_1.serializeAuthenticateWithMagicAuthOptions)(Object.assign(Object.assign({}, payload), { clientSecret: this.workos.key })));
            return (0, serializers_1.deserializeAuthenticationResponse)(data);
        });
    }
    authenticateWithPassword(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/users/authenticate', (0, serializers_1.serializeAuthenticateWithPasswordOptions)(Object.assign(Object.assign({}, payload), { clientSecret: this.workos.key })));
            return (0, serializers_1.deserializeAuthenticationResponse)(data);
        });
    }
    authenticateWithCode(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/users/authenticate', (0, serializers_1.serializeAuthenticateWithCodeOptions)(Object.assign(Object.assign({}, payload), { clientSecret: this.workos.key })));
            return (0, serializers_1.deserializeAuthenticationResponse)(data);
        });
    }
    authenticateWithTotp(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/users/authenticate', (0, serializers_1.serializeAuthenticateWithTotpOptions)(Object.assign(Object.assign({}, payload), { clientSecret: this.workos.key })));
            return (0, serializers_1.deserializeAuthenticationResponse)(data);
        });
    }
    sendVerificationEmail({ userId, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post(`/users/${userId}/send_verification_email`, {});
            return { user: (0, serializers_1.deserializeUser)(data.user) };
        });
    }
    sendMagicAuthCode(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/users/magic_auth/send', (0, serializers_1.serializeSendMagicAuthCodeOptions)(options));
            return { user: (0, serializers_1.deserializeUser)(data.user) };
        });
    }
    verifyEmailCode({ code, userId, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post(`/users/${userId}/verify_email_code`, {
                code,
            });
            return { user: (0, serializers_1.deserializeUser)(data.user) };
        });
    }
    sendPasswordResetEmail(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/users/send_password_reset_email', (0, serializers_1.serializeSendPasswordResetEmailOptions)(payload));
            return (0, serializers_1.deserializeSendPasswordResetEmailResponse)(data);
        });
    }
    resetPassword(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post('/users/password_reset', (0, serializers_1.serializeResetPasswordOptions)(payload));
            return { user: (0, serializers_1.deserializeUser)(data.user) };
        });
    }
    addUserToOrganization({ userId, organizationId, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post(`/users/${userId}/organizations`, {
                organization_id: organizationId,
            });
            return (0, serializers_1.deserializeUser)(data);
        });
    }
    removeUserFromOrganization({ userId, organizationId, }) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.delete(`/users/${userId}/organizations/${organizationId}`);
            return (0, serializers_1.deserializeUser)(data);
        });
    }
    updateUser(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.put(`/users/${payload.userId}`, (0, serializers_1.serializeUpdateUserOptions)(payload));
            return (0, serializers_1.deserializeUser)(data);
        });
    }
    updateUserPassword(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.put(`/users/${payload.userId}/password`, (0, serializers_1.serializeUpdateUserPasswordOptions)(payload));
            return (0, serializers_1.deserializeUser)(data);
        });
    }
    enrollAuthFactor(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.workos.post(`/users/${payload.userId}/auth/factors`, (0, serializers_1.serializeEnrollAuthFactorOptions)(payload));
            return {
                authenticationFactor: (0, serializers_2.deserializeFactor)(data.authentication_factor),
                authenticationChallenge: (0, serializers_2.deserializeChallenge)(data.authentication_challenge),
            };
        });
    }
    listAuthFactors(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new pagination_1.AutoPaginatable(yield (0, fetch_and_deserialize_1.fetchAndDeserialize)(this.workos, `/users/${options.userId}/auth/factors`, serializers_2.deserializeFactor, options), (params) => (0, fetch_and_deserialize_1.fetchAndDeserialize)(this.workos, `/users/${options.userId}/auth/factors`, serializers_2.deserializeFactor, params), options);
        });
    }
    deleteUser(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.workos.delete(`/users/${payload.userId}`);
        });
    }
}
exports.Users = Users;
