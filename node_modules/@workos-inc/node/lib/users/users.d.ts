import { WorkOS } from '../workos';
import { AutoPaginatable } from '../common/utils/pagination';
import { AddUserToOrganizationOptions, AuthenticateWithCodeOptions, AuthenticateWithMagicAuthOptions, AuthenticateWithPasswordOptions, AuthenticateWithTotpOptions, AuthenticationResponse, ResetPasswordOptions, SendPasswordResetEmailOptions, SendPasswordResetEmailResponse, CreateUserOptions, DeleteUserOptions, EnrollAuthFactorOptions, ListAuthFactorsOptions, ListUsersOptions, RemoveUserFromOrganizationOptions, SendMagicAuthCodeOptions, SendVerificationEmailOptions, UpdateUserOptions, UpdateUserPasswordOptions, User, VerifyEmailCodeOptions } from './interfaces';
import { Challenge, Factor } from '../mfa/interfaces';
export declare class Users {
    private readonly workos;
    constructor(workos: WorkOS);
    getUser(userId: string): Promise<User>;
    listUsers(options?: ListUsersOptions): Promise<AutoPaginatable<User>>;
    createUser(payload: CreateUserOptions): Promise<User>;
    authenticateWithMagicAuth(payload: AuthenticateWithMagicAuthOptions): Promise<AuthenticationResponse>;
    authenticateWithPassword(payload: AuthenticateWithPasswordOptions): Promise<AuthenticationResponse>;
    authenticateWithCode(payload: AuthenticateWithCodeOptions): Promise<AuthenticationResponse>;
    authenticateWithTotp(payload: AuthenticateWithTotpOptions): Promise<AuthenticationResponse>;
    sendVerificationEmail({ userId, }: SendVerificationEmailOptions): Promise<{
        user: User;
    }>;
    sendMagicAuthCode(options: SendMagicAuthCodeOptions): Promise<{
        user: User;
    }>;
    verifyEmailCode({ code, userId, }: VerifyEmailCodeOptions): Promise<{
        user: User;
    }>;
    sendPasswordResetEmail(payload: SendPasswordResetEmailOptions): Promise<SendPasswordResetEmailResponse>;
    resetPassword(payload: ResetPasswordOptions): Promise<{
        user: User;
    }>;
    addUserToOrganization({ userId, organizationId, }: AddUserToOrganizationOptions): Promise<User>;
    removeUserFromOrganization({ userId, organizationId, }: RemoveUserFromOrganizationOptions): Promise<User>;
    updateUser(payload: UpdateUserOptions): Promise<User>;
    updateUserPassword(payload: UpdateUserPasswordOptions): Promise<User>;
    enrollAuthFactor(payload: EnrollAuthFactorOptions): Promise<{
        authenticationFactor: Factor;
        authenticationChallenge: Challenge;
    }>;
    listAuthFactors(options: ListAuthFactorsOptions): Promise<AutoPaginatable<Factor>>;
    deleteUser(payload: DeleteUserOptions): Promise<void>;
}
